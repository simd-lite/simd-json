[package]
name = "simd-json"
version = "0.6.0"
authors = ["Heinz N. Gies <heinz@licenser.net>", "Sunny Gleason"]
edition = "2021"
exclude = ["data/*", "fuzz/*"]
license = "Apache-2.0 OR MIT"
description = "High performance JSON parser based on a port of simdjson"
repository = "https://github.com/simd-lite/simd-json"
readme = "README.md"
documentation = "https://docs.rs/simd-json"
rust-version = "1.59"

[dependencies]
beef = { version = "0.5", optional = true }
halfbrown = "0.1"
value-trait = { version = "0.4.0" }
simdutf8 = { version = "0.1.4", features = ["public_imp", "aarch64_neon"] }

# serde compatibilty
serde = { version = "1", features = ["derive"], optional = true }
serde_json = { version = "1", optional = true }

# perf testing
alloc_counter = { version = "0.0.4", optional = true }
colored = { version = "2.0", optional = true }
getopts = { version = "0.2", optional = true }
jemallocator = { version = "0.5", optional = true }
perfcnt = { version = "0.8", optional = true }


[dev-dependencies]
float-cmp = "0.9"
getopts = "0.2"
criterion = { version = "0.4" }
core_affinity = { version = "0.5" }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
proptest = "1.0"

[lib]
bench = false

[[bench]]
name = "parse"
harness = false

[features]
default = ["swar-number-parsing", "serde_impl"]

# Support for 128 bit integers
128bit = ["value-trait/128bit"]

# used for enabeling known keys in favour of a slower
# hasher that is not protected against hash collision
# attacks
known-key = ["halfbrown/fxhash"]

# use 8 number at once parsing strategy
swar-number-parsing = []

# serde compatibility
serde_impl = ["serde", "serde_json", "halfbrown/serde"]

# Allow fallback to non simd CPUs
allow-non-simd = []

# for testing allocations
alloc = ["alloc_counter"]

# don't inline code - used for debugging
no-inline = []

# uses safe slice access ([]) instead of get_unsafe
# **for debugging**
safe = []

# also bench serde in the benchmarks
bench-serde = ["serde_json"]

# use branch hints - requires nightly :(
hints = [] # requires nightly

# for perf testing, used by the example
perf = ["perfcnt", "getopts", "colored", "serde_json"]

[[example]]
name = "perf"

[profile.bench]
lto = "thin"

[profile.release]
lto = "thin"
